
buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'com.github.townsfolk:gradle-release:1.2'
    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.12'
}

// Sign release archives
ext.isRelease = !version.endsWith('SNAPSHOT')
ext.isUpload = false
gradle.taskGraph.whenReady { taskGraph ->
  ext.isUpload = gradle.taskGraph.hasTask(':uploadArchives') || gradle.taskGraph.hasTask(':uploadInternal')
  if (isRelease && isUpload && gradle.taskGraph.allTasks.any { it instanceof Sign }) {
    def password = System.console().readPassword('\n\n\n===>  Signing key password: ')
    allprojects { ext.'signing.password' = password }
  }
}

// Disable Javadoc linting under Java 8
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

def configurePom(def pom) {
  pom.project {
    name 'sikuli-web'
    description 'Sikuli exposed as a Dropwizard web service'
    url 'https://github.com/phensley/sikuli-web'

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    scm {
      connection 'scm:git:git@github.com:phensley/sikuli-web.git'
      url 'scm:git:git@github.com:phensley/sikuli-web.git'
      developerConnection 'scm:git:git@github.com:phensley/sikuli-web.git'
    }

    issueManagement {
      system 'github'
      url 'https://github.com/phensley/sikuli-web/issues'
    }
  }
}

allprojects {
  ext.commons_io = '2.1'
  ext.dropwizard = '0.7.1'
  ext.javacv = '0.9'
  ext.opencv = '2.4.9-0.9'
  ext.sikuli = '1.2.0'
  ext.testng = '6.8.7'

  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'license'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: 'maven'
  apply plugin: 'release'
  apply plugin: 'application'

  group 'com.glonk.sikuli-web'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  license {
    header rootProject.file('conf/apache-2.0-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    include '**/*.java'
  }

  repositories {
    mavenCentral()
    maven {
      url 'http://oss.sonatype.org/content/groups/public'
    }
  }

  dependencies {
    String osName = System.getProperty("os.name").toLowerCase()

    compile "commons-io:commons-io:${commons_io}"
    compile "io.dropwizard:dropwizard-core:${dropwizard}"
    compile "io.dropwizard:dropwizard-client:${dropwizard}"
    compile "io.dropwizard:dropwizard-forms:${dropwizard}"
    compile "org.sikuli:sikuli-api:${sikuli}"
    compile "org.bytedeco:javacv:${javacv}"
    compile "org.bytedeco:javacpp-presets:${javacv}"
    compile "org.bytedeco.javacpp-presets:opencv:${opencv}"

    if (osName.contains('mac os x')) {
        compile "org.bytedeco.javacpp-presets:opencv:${opencv}:macosx-x86_64"
    } else if (osName.contains('linux')) {
        compile "org.bytedeco.javacpp-presets:opencv:${opencv}:linux-x86_64"
    }

    testCompile "org.testng:testng:${testng}"
    testCompile "io.dropwizard:dropwizard-testing:${dropwizard}"
  }

  mainClassName = 'com.glonk.sikuliweb.SikuliWebApplication'

  run {
    args "server", "conf/dev.yml"
  }

  checkstyle {
    toolVersion = '5.7'
    ignoreFailures = false
    configFile = rootProject.file('checkstyle.xml')
  }

  test {
    useTestNG()
    finalizedBy jacocoTestReport
  }

  jacoco {
    toolVersion '0.7.1.201405082137'
  }

  jacocoTestReport {
    group = 'Reporting'
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
      html.destination = "${buildDir}/jacoco-report"
    }
  }

  eclipse.project {
    natures 'net.sf.eclipsecs.core.CheckstyleNature'
    buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
  }

  signing {
    required { isRelease && isUpload }
    sign configurations.archives
  }

  task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from(
      sourceSets.main.output,
      sourceSets.test.output
    )
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives testJar
    archives javadocJar
  }

  uploadArchives {
    repositories.mavenDeployer {
      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(
          userName: System.getenv('OSS_USERNAME'),
          password: System.getenv('OSS_PASSWORD')
        )
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(
          userName: System.getenv('OSS_USERNAME'),
          password: System.getenv('OSS_PASSWORD')
        )
      }

      configurePom(pom)
    }
  }

  /*
  task uploadInternal(type: Upload) {
    description = 'Uploads archives to internal Nexus'
    configuration = configurations.archives

    repositories.mavenDeployer {
      repository(url: NEXUS_INTERNAL_RELEASE_URL)
      snapshotRepository(url: NEXUS_INTERNAL_SNAPSHOT_URL)
      configurePom(pom)
    }
  }
  */
}

